package main

import (
	"fmt"
	"strings"
)

func main() {
	// input -> round list [[string, string], ...]
	input := `A Z
B X
A Y
B X
C Y
C X
B Z
C Z
A Y
C Z
B Z
B X
B X
C X
C X
B X
B Z
C X
B Y
B Z
B X
C Z
A Z
B X
A Y
B Y
C Y
B X
B Y
B Z
B Y
B Z
A Y
C Y
B X
A Z
B X
C Y
C Y
C Y
A Y
B X
B Y
C Y
B Z
C Y
A Z
B Y
A X
B X
C X
B Y
B Y
B Y
B Y
C X
A Y
A Y
C Z
C Y
B Y
B Y
B X
A Y
C Z
B Y
B Z
B Y
A Y
C X
B Y
B X
C Z
C Z
B X
A Y
C X
B Z
C Z
C Y
C X
B Z
B X
A Z
B X
C Z
C Y
C Y
B Y
B Z
B Y
A Y
A Y
C Y
C Y
C Z
C X
B X
B Z
B X
C Z
A Y
A X
B Y
A Z
B Y
B X
C Z
C Z
B Y
B Z
B Y
B Z
C X
C X
A Y
C Y
C Z
B Z
C Y
B Z
C X
B Y
B X
C X
A Z
B Y
C Y
C X
C Y
C Z
B Z
B X
C X
A Y
B X
B Z
C X
C Z
B Y
B Y
C X
B Z
A Y
B Y
C Y
C X
C Z
C Y
A Z
C Y
C X
C Y
B X
C X
B Y
C X
B X
B X
B Y
B X
A Z
B Y
B Y
C X
C Y
B X
B X
C Y
A Y
A Z
C X
B X
A Z
A Z
A Y
C X
C Z
C X
B X
C X
C X
B Y
B X
B X
B X
B Y
A Y
C X
C Y
B X
C X
A Y
B Z
C Z
B X
C Y
B Y
C Y
B Z
C X
C Y
C Y
B Y
C X
C X
B Z
B Y
B X
C Z
B Y
B X
B Z
B Z
C Y
B Z
A X
C X
B Z
B Z
B Z
B Y
C Z
C X
C X
C Y
B Z
B Y
B X
A Y
B Y
A Y
C X
C Z
C X
B Z
B Z
C X
C Y
A Y
B Y
C X
C Z
C X
C X
C Z
C Z
C X
B Y
C X
A Y
C Y
C Z
B X
B Y
B Z
A Y
B X
B Z
B Z
B Y
B X
C Y
A Y
B Z
C X
B Z
B Z
B Y
B Z
B X
C Y
C X
C X
B Z
B Y
C Z
B Y
B X
C Z
C Z
B X
A Z
B Z
A Z
C Y
C X
B Y
C Y
C X
C Y
C X
A Z
C Y
B Z
B X
C X
C Z
C X
C Z
B Z
B Y
B Z
B Y
C X
B Z
B Z
B Y
B Z
C Z
B Y
B Z
C Z
C Z
C X
B X
C Y
B X
C Y
B X
B X
C Y
A Z
B X
B X
C Z
C X
C X
C X
C Z
C Z
C Y
C X
A Y
B Z
C Z
C Y
C X
B Y
B Y
A Z
B X
B Y
B Y
C Z
C Z
B X
C X
A Z
B X
C Z
B Z
C X
A Z
B X
C X
C X
A Y
B Z
B Z
B X
C Y
C Z
C X
A Z
B Y
C Y
C Y
C Y
C X
B Y
B X
B X
C X
B Z
C X
B Z
B Z
B X
C X
A Y
B Y
C Z
C X
B Y
B Y
C Z
B X
C X
C Z
B Z
A Y
B X
B Z
B Y
C X
C Z
A Y
A Y
B X
B X
B Z
B Z
C Y
C X
B Y
B X
B X
B Y
B Y
C X
B X
B X
A Y
B Y
B Z
B Z
C Y
B Z
C Z
C X
C X
C Y
C X
C Z
C Z
B X
C X
B X
C Y
C Y
B Z
B Y
C X
B Z
C X
B Z
A Y
C X
B X
B Y
C X
C Y
B X
B Z
B X
C Y
B Z
B Y
B Z
C X
C X
C X
C Y
B X
B X
B X
C X
B X
B X
B Y
B Z
B Y
C X
B Y
B X
B X
A Y
C Y
B Z
A X
C Z
C Z
B Z
A Y
C Y
B Y
B Y
C Z
C Y
C X
A Y
C Y
B Y
C X
A Z
C Z
A Y
C Z
C Z
A Z
B Y
C Z
C Z
B Z
A Y
C X
C Y
B X
B Z
B X
C X
B X
C Z
B X
B X
B Y
C X
B Z
C X
A Z
C X
B Z
C X
C Z
B X
C X
B Y
B X
B Y
B Y
C X
B Y
C Z
C X
B Y
A Y
C Y
B Z
A Z
A Z
C X
C Y
C Y
B Y
B Y
C Z
C X
A X
B X
C Y
B Z
B X
B Y
A Z
A Z
A Z
C Z
C X
B Y
B Z
C X
B X
B X
B Z
A X
C X
A Y
C X
B X
C Y
C X
B Y
B Y
B Y
C X
C Y
C Y
B Z
B X
C Z
A Y
B Y
C Y
C X
C X
C Y
A Z
C Z
C Y
C Y
C Y
C Y
B Z
B Z
C X
B Y
C Y
B X
C X
C X
C Y
C Y
C Y
C X
B X
B Y
A Y
A Y
B X
B X
C Y
B Z
C X
A Y
A Y
C Z
B Z
C Z
C Z
A Z
B Z
A Y
B Z
B X
C X
A Y
B X
B Z
B X
C X
C Z
B Z
A X
B Z
B Y
B Z
B X
C Z
B X
B Y
B Y
B X
B Z
C X
A Y
B Z
B Y
C Y
A Y
C Z
B Z
C X
B Y
C Y
A Y
C Y
A Y
C X
B X
B Y
A Y
B X
B X
A Y
B X
B Y
B X
B X
C X
B Z
B Z
B Y
A X
C X
B X
C X
B Y
C X
C Y
C Y
C X
A Y
A Y
B Y
C X
B Y
C Y
B Y
C Z
C X
C X
C X
B Y
C Y
C Z
B Y
C X
B X
B Y
A Y
C X
B Y
B Z
A X
B Z
B Y
C Y
C X
B X
C X
C Y
B X
C Y
B Y
C X
B X
A Y
C Y
C X
A Y
B Y
C Y
C X
B Y
B Z
B X
B X
C Y
C Y
C X
B X
C Y
B Z
C Z
B Z
B Z
B Y
A Z
A Z
C Z
C Z
A X
A Y
B Z
C Y
A Y
B Y
C Z
B Z
C X
C Z
B Z
B Z
B Y
A Y
B Y
C X
C X
A Z
B X
C X
C Z
C Y
B X
B X
C Z
C X
C Y
C X
B Y
B Y
C X
C Y
C Z
B Z
C Z
B X
B Z
C Y
A X
A X
B Y
B X
B Z
C X
C X
A Y
C X
C X
C Z
C Y
C X
B X
C X
B X
B X
A Y
A Y
C X
B X
B Y
C X
C X
C Z
C Y
A X
C X
B Z
B X
C Y
B Y
A Z
C Y
C Z
B X
B Y
C Z
C Y
C Z
C Y
C X
C Z
B Z
A Z
B X
C X
B Z
B Z
A Y
C X
B X
C X
B X
C X
B Z
A Y
C X
B X
C Y
C Y
C X
C Y
B Z
C Z
C X
B Z
C Z
C Z
C Z
B Z
C Z
B Y
B Y
C Z
A Z
A X
B Z
C X
B X
C Y
A Y
C X
C X
A Y
C X
C Y
B Y
C Z
B X
A Y
C X
C X
B X
B X
A Z
B Y
B Z
B X
B X
B Z
B X
B X
B Z
A Z
C Z
B X
B X
C Y
B Z
B Z
B X
B Y
B Z
C Y
B Z
C Z
C X
C Y
A Y
C Y
C X
B Y
C Y
C Z
B Y
C X
B Z
B Z
A Y
B Y
B Y
B X
C Y
C X
B X
C X
A Y
C X
C Y
B X
C X
C Y
C Y
B Z
C Z
B Y
B Z
A X
C Y
A Y
C X
B X
B X
B Y
C Y
C Y
C X
A Y
A Z
B X
A X
C Z
C X
B Z
C Y
B X
A Y
C Y
C Y
B X
A Z
A Y
B Z
B Y
B Z
B Y
C X
A X
A Y
B X
B Z
B X
C X
B Y
B X
B Y
B X
C Z
C X
A Y
C Y
B X
B Y
A Z
B Z
C X
C X
C X
A Y
C X
C Y
B Y
B Z
B Y
B X
A Y
C Y
C Y
C Y
C X
A Y
B Z
C Z
C Y
B X
C X
C X
B X
B Z
B Z
B Y
A Z
B X
A Y
B Y
C X
B Y
A Y
B X
C Y
C X
A Y
C Z
C X
B Z
C Y
B X
C X
A X
C Y
B X
B Y
B Y
C X
B Y
C Y
C X
B Y
A Y
C Z
C Y
B Z
C Z
B Y
C X
B Z
A Y
C Z
B X
B Z
C Y
B Z
C X
C X
A Z
B Z
A Y
B X
C X
C X
B Y
A Z
C Z
C X
B Z
C X
B Z
C Y
C X
C Z
C Z
C Y
C Y
C X
C X
C Y
B X
C X
B Z
C Z
C Y
C X
C Y
B Y
B Y
B Z
B X
C Y
C Y
C X
C Z
C Y
C Y
C X
A Y
B X
B Z
C Z
C Y
B X
C X
A Y
C Z
B Y
C Y
C X
C Y
C Y
B X
C Y
C Y
B Y
C X
A Z
B X
B X
B X
B X
B Z
C Y
B X
A Z
B Z
A Y
C X
B X
B Z
C Z
C X
B Z
B X
A Z
A Y
B Y
A Z
B X
C Y
B Y
C Y
C X
B Y
B Y
C Y
A Z
B X
B Z
B Y
B Y
B X
B Y
B Z
C Z
B Y
C X
A Y
C X
B Y
B X
A Y
C Y
C Y
B X
B Y
B Z
C Y
C Y
C Z
C Z
A Y
C X
B Z
C X
B Y
C Y
B Z
C X
C X
A Y
C Y
A Y
C X
C X
C Z
A Y
A X
B X
C Y
B Z
C X
B Y
C X
C Y
C X
B X
B Y
B Z
C Y
B Y
A Z
C Y
B X
C X
A Z
C Y
B X
B X
C Y
C Y
B X
C Y
C Z
C X
B X
C Y
B Z
B Z
A Y
C X
C X
C Y
B X
A X
A Y
A Y
C X
B Y
C X
C Z
B Y
C Y
B X
C Y
B Z
B Y
A Z
B X
B Z
B Y
B X
C X
B Y
C X
C Y
B Y
A Y
C X
C Z
B Y
C Y
C X
C X
C X
B X
C X
C Y
B Y
C X
C Y
C X
A Y
B Z
B X
C X
A Y
B Z
A Y
B Z
B Z
B Z
A Y
B X
C Y
C X
B Y
A Y
C X
C X
A Y
C X
C Z
B X
C Y
C X
B Z
B Y
A Y
C X
C X
B Y
B Z
B X
B Y
C X
B X
C Y
B X
A X
B Z
B Y
B Y
C X
B X
C X
C X
C X
C X
B X
B Z
B X
B Z
B X
C X
B X
C Z
B Y
B Z
B Y
C X
B X
B Z
A Y
B Z
C Y
B X
B Y
C Z
C X
B X
A Y
A Y
B X
A Y
C Y
C X
A X
C Y
C Y
C X
C X
C Z
C Y
B X
A Y
C X
B Y
B Z
B Z
C Y
B Y
B Y
B Y
C Y
B Y
B Z
B Z
B Z
A X
B X
C Y
C Y
C Y
C Z
B Z
B X
C Z
C Y
A Y
A Y
C Y
B Z
C Y
C Z
A Z
C Y
A Y
C Z
C X
B Z
B Y
B Y
A X
C X
B Z
B X
B Z
C Z
B X
A Y
B Z
C X
C Y
B Y
C X
B Z
B Z
B Z
C X
B Z
B Y
B Y
B Y
C Y
A Y
B X
A Y
C Z
C X
C X
C X
C X
C Y
B Y
B X
C X
C X
B Z
A Z
C X
C Z
B X
B Z
C Y
B X
B X
B Y
C Y
B Z
A Z
B X
C Y
B Z
B X
C Y
B Z
B X
C Z
C X
C Z
B Z
A Y
B Y
A Z
C Z
B Z
B Z
B Z
C Z
C X
A Y
C Z
B Z
B X
B X
B Y
A Y
B Y
C X
B Y
C Z
C Y
B Z
C X
A Z
B Z
C Y
C Z
B X
C Z
A Y
A Y
A Y
C Z
C Z
B Y
C X
C Z
C X
C Y
B Z
C Z
B Y
C Y
A Y
B X
B X
B X
B X
C Y
C Y
C X
B Z
B X
A Y
B X
B X
C Y
C Y
C Y
C Y
B Z
B Y
C X
B Y
B X
C X
C X
B X
C X
C X
B X
B Y
B X
B X
B Y
B X
C Y
B Y
C Y
C Z
C X
B Z
B Z
B Y
C Z
C Z
C Y
B X
B Y
B Z
B Z
A Z
C X
C Y
B X
B X
C X
B Z
C X
B Y
C X
C Y
B Y
B Y
A Z
B Y
B X
C Y
B Z
A Z
B Y
C Y
C X
B X
B X
B Z
C Z
C Z
C X
B Z
B X
A Y
C X
A Y
A Y
B Y
C Y
B X
C Z
B Z
B X
C X
A X
C Z
B Z
B X
C Y
C X
B X
C Z
C Y
B Z
C Y
B Y
C X
B Z
A Y
C X
C Y
A Y
B Y
B Y
C X
B X
B Y
B Y
B Y
A Y
A Y
C Z
C Y
B X
A Y
C X
C X
C Y
C X
A Y
B Y
C Y
B X
C Y
C X
C X
C X
A Y
A Y
B Y
B X
B Y
B X
C X
C Y
B Z
B Y
C Y
C Z
A Z
B X
B Z
C Z
A Y
C Y
B X
C X
B X
B Z
C Y
B X
B Y
B X
B Z
C Y
C Z
A Y
C Y
A Z
B Y
A Y
A Y
C X
A X
A X
C Y
C Z
C Y
B X
C X
B Z
B Y
C X
C X
A Y
C X
C Y
C X
C X
C X
C X
C Z
B X
A Y
C Y
B Z
B Z
C Z
B Y
B X
B Y
C X
C Y
B Y
B X
B Y
C X
B Z
B X
C Z
C Z
B Z
C Y
A X
C Z
C X
C X
A Y
B X
C X
B Z
C X
B Y
C Z
B X
B Y
C Y
B Z
B Z
C X
C X
B Z
C Z
B Y
B Y
B Z
B X
C Y
C Y
B X
B X
B X
B Y
B Z
B Y
C X
C Y
C Z
B X
B Y
C X
B X
A Z
A Z
C Z
C Z
C X
C Y
C X
B Y
C X
C X
B Z
B Z
B Y
C Y
B Y
B Y
B X
B X
C Y
A Z
C Y
B X
B Z
B Y
A Y
C Z
B Z
C Y
C Z
C Y
C Z
B Z
B Z
C X
C X
B X
B Y
B X
A Z
B X
B Z
B X
B Y
C Y
B Y
C Z
C X
A Y
A Y
C Y
B Y
C Y
B X
B Y
C Z
A Z
B X
B Y
B Y
B Y
B X
C X
C Y
C X
B X
B X
B X
B Y
B X
B Z
B Y
C Y
A Z
C Z
B Y
C Y
B Z
B Y
B Y
C X
B X
C Z
C X
B X
A Y
B Z
C Y
C Y
B Y
B Y
A Y
A Z
B X
B Z
B Z
B Z
B Z
A Y
B Z
B X
C X
C Y
B Y
C Y
B X
C X
A Y
C Z
B X
B X
B Y
A X
B X
C Y
B Z
A X
C Y
C Z
C Z
B X
C X
A X
C X
A Z
B X
B Y
C Z
B Z
B X
C X
B X
C Z
C X
B Z
A Z
A Y
C X
C Y
B X
C X
A Y
C X
B X
B Z
C Y
B X
C Y
C X
B X
C X
C Z
A Z
C Y
C Y
C X
C Z
A Y
C X
C X
C X
C X
B Y
B Z
C X
C Y
C X
B X
A Y
C Y
A Y
A Z
B X
C Y
C X
C Y
C X
B X
B Y
B X
C X
B Z
B Z
B Y
B X
B X
B Y
B Y
A Y
C Y
B Z
B X
C Y
C Y
C X
A X
B Z
C Y
B X
C Y
B Y
C X
C Y
C Z
A Y
C X
A Z
C X
B Y
C X
B X
B Z
B Z
B Y
B Z
B Z
B X
C X
B X
B Y
B X
B Z
C Y
B X
C X
C Y
C X
B Y
B X
C X
B X
C X
B Y
C Z
C X
B Z
A Y
B X
A Y
B Y
B X
C Y
B X
B Z
C Z
B Y
C X
A Y
B Y
C X
C X
B Y
C Y
B Z
C X
B Z
B X
C Y
C X
C Z
B X
C Z
B X
B X
C Y
B Y
C Y
B Y
C X
A Y
B X
C X
C Z
C X
A Y
B Z
A Y
B Z
B X
B Z
B Y
A Y
C X
B Y
C Z
A Y
B X
C X
C Z
C X
C X
B X
C X
C Z
B Z
C Z
B X
C Z
B Z
B Y
B X
B X
B X
C Z
C Y
A Y
B Z
B X
B X
C Z
A Y
B X
C Y
B Z
C X
B Y
C Y
B X
B X
B X
B Y
B Y
C X
C Z
B Z
C X
B Y
B Z
B Z
B Y
B Y
C X
B Y
B Y
B Z
A Y
C Y
C X
B X
C Y
C X
C X
B X
B Z
C X
A Y
B Y
C Z
C Y
B X
B X
B Z
C Z
C X
A Y
C Z
C X
C X
B Z
B X
C Y
B Y
B Y
C Z
B Z
A Z
C X
A Y
C Y
B X
C X
B X
A Y
C X
C Z
C Y
A Z
C X
B Z
B Y
A Y
C X
B X
C Z
C Y
C Y
B Z
C X
C Y
B Z
B Y
C X
C Z
B Z
A Z
C Z
B X
C X
C X
C Y
C X
B Z
C X
C Y
C X
B Z
B Z
A Z
B Z
B X
B X
C Y
C Z
B Z
C Y
C Z
B X
A Y
B X
C X
B Y
C X
B Y
B X
C X
B Z
C Y
C X
B X
B X
B X
B Y
B Y
B Y
A X
B X
C Y
C Z
B Z
C X
A Y
C X
C Y
B Y
C Y
C X
B Z
B Y
B Y
B Z
C Y
C Y
A X
C Z
B X
B Z
B Y
C X
C Y
B Y
C Z
B Z
C X
B Z
C X
B Y
B Z
C X
C X
B Y
B Y
B Y
C X
B Y
B Z
B Y
A Z
B Z
A X
C Y
A Y
C Y
B Z
B X
A Y
C X
B X
A Y
B Y
C X
B Y
C X
B X
B Z
A Y
B Z
B X
C Z
C X
B Z
C X
A Y
C Y
C Y
A Y
B Y
C X
C Y
C X
B X
C Y
B Z
B X
B Y
B X
C X
B X
C Y
C Y
B Y
B Z
C Z
B X
C Y
C X
A X
A Y
B Z
B Y
A Y
C X
C X
C Y
B X
C Z
C Z
B Y
B X
C X
A Y
B X
B X
C Z
C X
C Z
B X
B X
B Y
B Y
C Y
C X
A Z
C Z
B Y
C X
B Z
C X
B X
C X
B Z
C Z
B Y
B X
B Y
C Y
B Y
C Z
A Z
B X
C Z
B Y
C Z
C X
A X
B Z
B Z
C Y
C X
B Y
C Y
C Z
B X
B Z
C X
C Z
B Z
C Z
B X
C X
B Y
B Z
C Y
B Y
B X
B Y
B Z
B Z
A Z
B Y
C Y
A X
B X
C Y
A Y
C Y
B X
C X
B Z
C Y
C X
C Z
B Y
B X
C Z
A Y
C Y
C X
B X
B Z
B Z
B X
C Y
C Z
C Z
B Z
B X
C X
A Y
B X
B Z
C Y
C X
B X
C X
C X
B Y
A Y
A X
C Z
C Y
C Z
C Z
C Z
C X
A Z
C Y
B X
A X
B X
B X
A Y
B X
C X
B X
B X
B X
C Y
C X
A Y
B X
C X
C Y
A Y
C X
C Y
C Z
C X
C Z
C Z
B Y
B Y
C Y
A Y
C Y
B X
B Z
B Z
C Z
C X
B X
B Z
C X
B Z
B Z
C X
B Z
B Z
B X
B Y
C Z
B Y
B Z
A Y
C X
C X
B Z
C Y
C X
A X
B Z
C Y
C Z
B Z
B Z
C Y
A Y
C Z
C X
C X
C X
B Z
C X
B Y
C X
C X
B Z
C X
A Y
C Z
C X
A Z
B Y
A Y
B X
B X
C Y
B Y
B X
A Z
B Z
C Y
C X
B Y
B Y
B Y
B Z
C Y
C Y
A Y
C Y
C Z
B X
C X
B Y
C Y
A Z
C Y
C X
B Z
C Z
B Z
C X
C X
C X
B X
C Y
C Z
B X
C X
A Y
C Y
B Y
B Z
C Y
C X
C X
B X
C X
C Z
C Y
A Y
C X
B Y
B Z
C X
C Z
B Z
C Z
B Z
B X
B X
C X
C Z
B Y
B X
C Z
A Y
B X
B Y
C X
B X`
	rounds := parseInputPart1(input)

	// round list -> scores [int, ...]
	scores := make([]int, len(rounds))
	for i, r := range rounds {
		scores[i] = scoreRound(r)
	}

	// sum scores
	part1 := 0
	for _, s := range scores {
		part1 += s
	}
	fmt.Printf("Part 1: %v\n", part1)

	part2Lines := parseInputPart2(input)
	rounds2 := make([][2]shape, len(part2Lines))
	for i, l := range part2Lines {
		rounds2[i] = makeRound(l)
	}
	scores2 := make([]int, len(rounds2))
	for i, r := range rounds2 {
		scores2[i] = scoreRound(r)
	}
	part2 := 0
	for _, s := range scores2 {
		part2 += s
	}

	fmt.Printf("Part 2: %v\n", part2)
}

func makeRound(l Part2Line) [2]shape {
	mappings := map[outcome]map[shape]shape{
		Win: {
			Rock:     Paper,
			Paper:    Scissors,
			Scissors: Rock,
		},
		Lose: {
			Rock:     Scissors,
			Paper:    Rock,
			Scissors: Paper,
		},
		Draw: {
			Rock:     Rock,
			Paper:    Paper,
			Scissors: Scissors,
		},
	}

	return [2]shape{l.theirs, mappings[l.target][l.theirs]}
}

type outcome int

const (
	Win  outcome = 6
	Draw outcome = 3
	Lose outcome = 0
)

type shape int

const (
	Rock     shape = 1
	Paper    shape = 2
	Scissors shape = 3
)

func shapeFromInput(s string) shape {
	mapping := map[string]shape{
		"A": Rock,
		"X": Rock,
		"B": Paper,
		"Y": Paper,
		"C": Scissors,
		"Z": Scissors,
	}

	return mapping[s]
}

func outcomeFromInput(s string) outcome {
	mapping := map[string]outcome{
		"X": Lose,
		"Y": Draw,
		"Z": Win,
	}

	return mapping[s]
}

func scoreRound(r [2]shape) int {
	them := r[0]
	us := r[1]

	if them == Rock && us == Scissors {
		return int(Lose) + int(us)
	}

	if them == Scissors && us == Rock {
		return int(Win) + int(us)
	}

	if them == us {
		return int(Draw) + int(us)
	}

	if us > them {
		return int(Win) + int(us)
	}

	return int(Lose) + int(us)
}

func parseInputPart1(input string) [][2]shape {
	rounds := make([][2]shape, 0)

	for _, line := range strings.Split(input, "\n") {

		pair := strings.Split(line, " ")
		theirs := shapeFromInput(pair[0])
		ours := shapeFromInput(pair[1])

		rounds = append(rounds, [2]shape{theirs, ours})
	}

	return rounds
}

type Part2Line struct {
	theirs shape
	target outcome
}

func parseInputPart2(input string) []Part2Line {
	lines := make([]Part2Line, 0)

	for _, line := range strings.Split(input, "\n") {
		pair := strings.Split(line, " ")
		theirs := shapeFromInput(pair[0])
		outcome := outcomeFromInput(pair[1])

		lines = append(lines, Part2Line{theirs, outcome})
	}

	return lines
}
